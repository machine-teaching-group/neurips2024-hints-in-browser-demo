import { twMerge } from 'tailwind-merge'
import { Slider } from '@/components/ui/slider.tsx'
import {
  Collapsible,
  CollapsibleContent,
} from '@/components/ui/collapsible.tsx'
import { ReactNode, useState } from 'react'
import * as webllm from '@mlc-ai/web-llm'
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover.tsx'
import { FaGear } from 'react-icons/fa6'
import SideHeader from '@/components/SideHeader.tsx'
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select.tsx'

export type LLMParams = {
  temperature: number
  hint_temperature: number
  max_gen_len: number
  numRepairs: number
}

export default function SideParams({
  className,
  params,
  setParams,
  modelConfigList,
  defaultModel,
  onModelChange,
  loading,
}: {
  className?: string
  params: LLMParams
  setParams: (params: LLMParams) => void
  modelConfigList: webllm.ModelRecord[]
  defaultModel: string
  onModelChange: (model: string) => void
  loading: boolean
}) {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <Collapsible
      className={twMerge(`flex flex-col gap-y-5 items-start`, className)}
      open={isOpen}
      onOpenChange={setIsOpen}
    >
      <SideHeader isOpen={isOpen} title={'Settings'} icon={<FaGear />} />
      <CollapsibleContent
        className={`w-full flex flex-col gap-y-7 pl-6 text-sm font-normal text-gray-700`}
      >
        <div className={`flex flex-col gap-y-2 px-px`}>
          <span>Model</span>
          <Select
            defaultValue={defaultModel}
            onValueChange={(value) => onModelChange(value)}
            disabled={loading}
          >
            <SelectTrigger className="w-full text-xs">
              <SelectValue placeholder="Select a fruit" />
            </SelectTrigger>
            <SelectContent>
              <SelectGroup>
                {modelConfigList.map((modelConfig, idx) => (
                  <SelectItem
                    key={idx}
                    value={modelConfig.model_id}
                    className="text-xs"
                  >
                    {modelConfig.model_id}
                  </SelectItem>
                ))}
              </SelectGroup>
            </SelectContent>
          </Select>
        </div>
        <ParamSlider
          label={`Number of repairs`}
          value={params.numRepairs}
          setValue={(value) => setParams({ ...params, numRepairs: value })}
          min={1}
          max={10}
          step={1}
          tooltip={
            <div className="flex flex-col gap-y-2 text-xs font-normal text-justify text-pretty leading-tight">
              <div className="bg-gradient-to-r from-mediumBlue/5 via-mediumBlue/20 to-mediumBlue/5 h-px" />
              <span>
                This is the total number of program repairs generated by the
                model as part of the hint generation process.
              </span>
              <span>
                Choosing a higher value can increase hint quality, but will also
                increase the overall time taken.
              </span>
              <div className="bg-gradient-to-r from-mediumBlue/5 via-mediumBlue/20 to-mediumBlue/5 h-px" />
            </div>
          }
        />
        <ParamSlider
          label={`Repair temperature`}
          value={params.temperature}
          setValue={(value) => setParams({ ...params, temperature: value })}
          min={0}
          max={2.0}
          step={0.1}
          valueFormatter={(value) => value.toFixed(1)}
        />
        <ParamSlider
          label={`Hint temperature`}
          value={params.hint_temperature}
          setValue={(value) =>
            setParams({ ...params, hint_temperature: value })
          }
          min={0}
          max={2.0}
          step={0.1}
          valueFormatter={(value) => value.toFixed(1)}
        />
      </CollapsibleContent>
    </Collapsible>
  )
}

function ParamSlider({
  label,
  value,
  setValue,
  min,
  max,
  step,
  valueFormatter = (value: number) => value.toFixed(0),
  tooltip,
}: {
  label: string
  value: number
  setValue: (value: number) => void
  min: number
  max: number
  step: number
  valueFormatter?: (value: number) => string
  tooltip?: ReactNode
}) {
  const [popoverOpen, setPopoverOpen] = useState(false)

  return (
    <div className={`flex flex-col gap-y-1`}>
      <div className="flex flex-row gap-x-1 items-center">
        <span className="text-sm text-gray-600 font-normal">{label}</span>
        {tooltip && (
          <Popover
            open={popoverOpen}
            onOpenChange={(open) => setPopoverOpen(open)}
          >
            <PopoverTrigger asChild>
              <div className="rounded-full group">
                <QuestionMarkIcon
                  className={twMerge(
                    'pb-1 w-4 h-4 group-hover:fill-veryDarkBlue/80 transition-colors',
                    popoverOpen
                      ? 'fill-veryDarkBlue/80'
                      : 'fill-veryDarkBlue/40'
                  )}
                />
              </div>
            </PopoverTrigger>
            <PopoverContent>{tooltip}</PopoverContent>
          </Popover>
        )}
      </div>
      <div className={`flex flex-row gap-x-2 justify-between`}>
        <Slider
          className={`w-10/12`}
          min={min}
          max={max}
          step={step}
          value={[value]}
          onValueChange={(value) => setValue(value[0])}
        />
        <span
          className={`py-1 w-9 bg-white/50 border border-mediumBlue/20 rounded-md text-center text-xs text-gray-800 font-medium`}
        >
          {valueFormatter(value)}
        </span>
      </div>
    </div>
  )
}

function QuestionMarkIcon({ className }: { className?: string }) {
  return (
    <svg
      className={className}
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 512 512"
    >
      <path d="M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm169.8-90.7c7.9-22.3 29.1-37.3 52.8-37.3h58.3c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24V250.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1H222.6c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z" />
    </svg>
  )
}
